"""empty message

Revision ID: 3b1442c0d513
Revises: None
Create Date: 2016-11-29 21:54:33.741231

"""

# revision identifiers, used by Alembic.
revision = '3b1442c0d513'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('idCategory', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=200), nullable=True),
    sa.Column('description', sa.String(length=400), nullable=True),
    sa.PrimaryKeyConstraint('idCategory')
    )
    op.create_table('organization',
    sa.Column('idOrganization', sa.Integer(), nullable=False),
    sa.Column('publicName', sa.String(length=150), nullable=True),
    sa.Column('completeName', sa.String(length=300), nullable=True),
    sa.Column('startDate', sa.Date(), nullable=True),
    sa.Column('endDate', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('idOrganization')
    )
    op.drop_table('organizations')
    op.drop_table('organizationsproposals')
    op.drop_table('domain')
    op.drop_table('position')
    op.drop_table('proposalstate')
    op.drop_table('politicsproposals')
    op.drop_table('role')
    op.drop_table('category')
    op.add_column('politics', sa.Column('completeName', sa.String(length=300), nullable=True))
    op.add_column('politics', sa.Column('idPolitician', sa.Integer(), nullable=False))
    op.add_column('politics', sa.Column('publicName', sa.String(length=150), nullable=True))
    op.drop_column('politics', 'completename')
    op.drop_column('politics', 'idpolitician')
    op.drop_column('politics', 'publicname')
    op.drop_column('politics', 'publicbiolink')
    op.add_column('proposals', sa.Column('idProposal', sa.Integer(), nullable=False))
    op.add_column('proposals', sa.Column('linkProposal', sa.String(length=200), nullable=True))
    op.add_column('proposals', sa.Column('nameProposal', sa.String(length=120), nullable=True))
    op.alter_column('proposals', 'description',
               existing_type=sa.VARCHAR(length=10000),
               nullable=True)
    op.drop_constraint(u'proposals_idproposalstate_fkey', 'proposals', type_='foreignkey')
    op.drop_constraint(u'proposals_idcategory_fkey', 'proposals', type_='foreignkey')
    op.drop_column('proposals', 'idcategory')
    op.drop_column('proposals', 'idproposal')
    op.drop_column('proposals', 'linkproposal')
    op.drop_column('proposals', 'idproposalstate')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
    op.alter_column('users', 'firstname',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'lastname',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'pwdhash',
               existing_type=sa.VARCHAR(length=150),
               nullable=True)
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'phonenumber')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('phonenumber', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.alter_column('users', 'pwdhash',
               existing_type=sa.VARCHAR(length=150),
               nullable=False)
    op.alter_column('users', 'lastname',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'firstname',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
    op.add_column('proposals', sa.Column('idproposalstate', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('proposals', sa.Column('linkproposal', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('proposals', sa.Column('idproposal', sa.INTEGER(), nullable=False))
    op.add_column('proposals', sa.Column('idcategory', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(u'proposals_idcategory_fkey', 'proposals', 'category', ['idcategory'], ['idcategory'], ondelete=u'SET NULL')
    op.create_foreign_key(u'proposals_idproposalstate_fkey', 'proposals', 'proposalstate', ['idproposalstate'], ['idproposalstate'], ondelete=u'SET NULL')
    op.alter_column('proposals', 'description',
               existing_type=sa.VARCHAR(length=10000),
               nullable=False)
    op.drop_column('proposals', 'nameProposal')
    op.drop_column('proposals', 'linkProposal')
    op.drop_column('proposals', 'idProposal')
    op.add_column('politics', sa.Column('publicbiolink', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('politics', sa.Column('publicname', sa.VARCHAR(length=150), autoincrement=False, nullable=False))
    op.add_column('politics', sa.Column('idpolitician', sa.INTEGER(), nullable=False))
    op.add_column('politics', sa.Column('completename', sa.VARCHAR(length=300), autoincrement=False, nullable=False))
    op.drop_column('politics', 'publicName')
    op.drop_column('politics', 'idPolitician')
    op.drop_column('politics', 'completeName')
    op.create_table('category',
    sa.Column('idcategory', sa.INTEGER(), server_default=sa.text(u"nextval('category_idcategory_seq'::regclass)"), nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idcategory', name=u'category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('role',
    sa.Column('idrole', sa.INTEGER(), server_default=sa.text(u"nextval('role_idrole_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('idrole', name=u'role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('politicsproposals',
    sa.Column('idproposal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('idpolitician', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['idpolitician'], [u'politics.idpolitician'], name=u'politicsproposals_idpolitician_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['idproposal'], [u'proposals.idproposal'], name=u'politicsproposals_idproposal_fkey', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('idpolitician', 'idproposal', name=u'politicsproposals_pkey')
    )
    op.create_table('proposalstate',
    sa.Column('idproposalstate', sa.INTEGER(), server_default=sa.text(u"nextval('proposalstate_idproposalstate_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('statedate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('statelink', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idproposalstate', name=u'proposalstate_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('position',
    sa.Column('idposition', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dateStart', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dateEnd', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('idpolitician', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('idrole', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('iddomain', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idorganization', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['iddomain'], [u'domain.iddomain'], name=u'position_iddomain_fkey'),
    sa.ForeignKeyConstraint(['idorganization'], [u'organizations.idorganization'], name=u'position_idorganization_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['idpolitician'], [u'politics.idpolitician'], name=u'position_idpolitician_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['idrole'], [u'role.idrole'], name=u'position_idrole_fkey', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('idposition', name=u'position_pkey')
    )
    op.create_table('domain',
    sa.Column('iddomain', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('officialname', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('publicbiolink', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('iddomain', name=u'domain_pkey')
    )
    op.create_table('organizationsproposals',
    sa.Column('idproposal', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('idorganization', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['idorganization'], [u'organizations.idorganization'], name=u'organizationsproposals_idorganization_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['idproposal'], [u'proposals.idproposal'], name=u'organizationsproposals_idproposal_fkey', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('idorganization', 'idproposal', name=u'organizationsproposals_pkey')
    )
    op.create_table('organizations',
    sa.Column('idorganization', sa.INTEGER(), nullable=False),
    sa.Column('publicname', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('completename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('startdate', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('enddate', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('publicbiolink', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idorganization', name=u'organizations_pkey')
    )
    op.drop_table('organization')
    op.drop_table('categories')
    ### end Alembic commands ###
